// Generated by CoffeeScript 1.3.3

/*
 * Copyright (c) 2011, iSENSE Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials
 * provided with the distribution. Neither the name of the University of
 * Massachusetts Lowell nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.Scatter = (function(_super) {

    __extends(Scatter, _super);

    /*
        TODO: Comment This
    */


    function Scatter(canvas) {
      this.canvas = canvas;
      this.SYMBOLS_LINES_MODE = 3;
      this.LINES_MODE = 2;
      this.SYMBOLS_MODE = 1;
      this.mode = this.SYMBOLS_LINES_MODE;
    }

    /*
        TODO: Comment This
    */


    Scatter.prototype.buildOptions = function() {
      Scatter.__super__.buildOptions.call(this);
      this.chartOptions;
      return $.extend(true, this.chartOptions, {
        chart: {
          type: "line",
          zoomType: "xy"
        },
        title: {
          text: "Scatter"
        },
        xAxis: {
          type: (Number(data.fields[globals.xAxis].typeID)) === 7 ? 'datetime' : 'linear'
        }
      });
    };

    /*
        TODO: Comment This
    */


    Scatter.prototype.buildLegendSeries = function() {
      var count, field, options, _i, _len, _ref, _ref1, _results;
      count = -1;
      _ref = data.fields;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        field = _ref[_i];
        if (!((_ref1 = Number(field.typeID)) !== 37 && _ref1 !== 7)) {
          continue;
        }
        count += 1;
        options = {
          data: [],
          color: '#000',
          visible: __indexOf.call(globals.fieldSelection, field) >= 0 ? true : false,
          name: field.fieldName
        };
        switch (false) {
          case this.mode !== this.SYMBOLS_LINES_MODE:
            options.marker = {
              symbol: globals.symbols[count % globals.symbols.length]
            };
            break;
          case this.mode !== this.SYMBOLS_MODE:
            options.marker = {
              symbol: globals.symbols[count % globals.symbols.length]
            };
            options.lineWidth = 0;
            break;
          case this.mode !== this.LINES_MODE:
            options.marker = {
              symbol: 'blank'
            };
            options.dashStyle = globals.dashes[count % globals.dashes.length];
        }
        _results.push(options);
      }
      return _results;
    };

    /*
        TODO: Comment This
    */


    Scatter.prototype.drawControls = function() {
      this.drawGroupControls();
      this.drawXAxisControls();
      return this.drawModeControls();
    };

    /*
        TODO: Comment This
    */


    Scatter.prototype.update = function() {
      var fieldIndex, group, groupIndex, options, symbolIndex, _i, _j, _len, _len1, _ref, _ref1;
      Scatter.__super__.update.call(this);
      _ref = data.normalFields;
      for (symbolIndex = _i = 0, _len = _ref.length; _i < _len; symbolIndex = ++_i) {
        fieldIndex = _ref[symbolIndex];
        if (__indexOf.call(globals.fieldSelection, fieldIndex) >= 0) {
          _ref1 = data.groups;
          for (groupIndex = _j = 0, _len1 = _ref1.length; _j < _len1; groupIndex = ++_j) {
            group = _ref1[groupIndex];
            if (!(__indexOf.call(globals.groupSelection, groupIndex) >= 0)) {
              continue;
            }
            options = {
              data: data.xySelector(globals.xAxis, fieldIndex, groupIndex),
              showInLegend: false,
              color: globals.colors[groupIndex % globals.colors.length],
              name: data.groups[groupIndex] + data.fields[fieldIndex].fieldName
            };
            switch (false) {
              case this.mode !== this.SYMBOLS_LINES_MODE:
                options.marker = {
                  symbol: globals.symbols[symbolIndex % globals.symbols.length]
                };
                break;
              case this.mode !== this.SYMBOLS_MODE:
                options.marker = {
                  symbol: globals.symbols[symbolIndex % globals.symbols.length]
                };
                options.lineWidth = 0;
                break;
              case this.mode !== this.LINES_MODE:
                options.marker = {
                  symbol: 'blank'
                };
                options.dashStyle = globals.dashes[symbolIndex % globals.dashes.length];
            }
            this.chart.addSeries(options, false);
          }
        }
      }
      return this.chart.redraw();
    };

    /*
        TODO: Comment This
    */


    Scatter.prototype.drawModeControls = function() {
      var controls,
        _this = this;
      controls = '<div id="AnalysisTypeControl" class="vis_controls">';
      controls += '<table class="vis_control_table"><tr><td class="vis_control_table_title">Tools:</td></tr>';
      controls += '<tr><td><div class="vis_control_table_div">';
      controls += "<input class='mode_radio' type='radio' name='mode_selector' value='" + this.SYMBOLS_LINES_MODE + "' " + (this.mode === this.SYMBOLS_LINES_MODE ? 'checked' : '') + "/>";
      controls += "Symbols and Lines  </div></td></tr>";
      controls += '<tr><td><div class="vis_control_table_div">';
      controls += "<input class='mode_radio' type='radio' name='mode_selector' value='" + this.LINES_MODE + "' " + (this.mode === this.LINES_MODE ? 'checked' : '') + "/>";
      controls += "Lines Only </div></td></tr>";
      controls += '<tr><td><div class="vis_control_table_div">';
      controls += "<input class='mode_radio' type='radio' name='mode_selector' value='" + this.SYMBOLS_MODE + "' " + (this.mode === this.SYMBOLS_MODE ? 'checked' : '') + "/>";
      controls += "Symbols Only </div></td></tr>";
      controls += '</table></div>';
      ($('#controldiv')).append(controls);
      return ($('.mode_radio')).click(function(e) {
        _this.mode = Number(e.target.value);
        return _this.delayedUpdate();
      });
    };

    return Scatter;

  })(BaseVis);

  globals.scatter = new Scatter('scatter_canvas');

}).call(this);
