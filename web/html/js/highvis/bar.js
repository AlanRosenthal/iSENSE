// Generated by CoffeeScript 1.3.3

/*
 * Copyright (c) 2011, iSENSE Project. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer. Redistributions in binary
 * form must reproduce the above copyright notice, this list of conditions and
 * the following disclaimer in the documentation and/or other materials
 * provided with the distribution. Neither the name of the University of
 * Massachusetts Lowell nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 *
*/


(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.Bar = (function(_super) {

    __extends(Bar, _super);

    function Bar(canvas) {
      this.canvas = canvas;
    }

    Bar.prototype.analysisType = "Max";

    Bar.prototype.buildOptions = function() {
      var fieldIndex, groupIndex, options, _results;
      Bar.__super__.buildOptions.call(this);
      this.chartOptions;
      $.extend(true, this.chartOptions, {
        chart: {
          type: "column"
        },
        title: {
          text: "Bar"
        },
        xAxis: {
          categories: (function() {
            var _i, _len, _ref, _results;
            _ref = data.normalFields;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              fieldIndex = _ref[_i];
              _results.push(data.fields[fieldIndex].fieldName);
            }
            return _results;
          })()
        }
      });
      _results = [];
      for (groupIndex in data.groups) {
        options = {
          data: (function() {
            var _i, _len, _ref, _results1;
            _ref = data.normalFields;
            _results1 = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              fieldIndex = _ref[_i];
              _results1.push(data.getMax(fieldIndex, this.groupFilter));
            }
            return _results1;
          }).call(this),
          showInLegend: false,
          name: data.groups[groupIndex]
        };
        _results.push(this.chartOptions.series.push(options));
      }
      return _results;
    };

    Bar.prototype.drawAnalysisTypeControls = function() {
      var controls;
      controls = '<div id="AnalysisTypeControl" class="vis_controls">';
      controls += '<table class="vis_control_table"><tr><td class="vis_control_table_title">Analysis Type:</td></tr>';
      controls += '<tr><td><div class="vis_control_table_div">';
      controls += '<select><option>Max</option><option>Min</option><option>Mean</option></select>';
      controls += '</div></td></tr>';
      controls += '</table></div>';
      return ($('#controldiv')).append(controls);
    };

    Bar.prototype.drawControls = function() {
      this.drawGroupControls();
      return this.drawAnalysisTypeControls();
    };

    return Bar;

  })(BaseVis);

  globals.bar = new Bar('bar_canvas');

}).call(this);
